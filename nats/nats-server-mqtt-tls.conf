# Example MQTT server. Playground.
# Many clients. TLS. Authentication.






port: 4222
monitor_port: 8222
server_name: "experiment"
jetstream: enabled

cluster {
  # name: C1
  # listen: 0.0.0.0:6222
  # routes [
  #   nats://nats_cluster:password@nats-2/
  # ]
  authorization {
    user: nats_cluster
    password: password
    timeout: 0.5
  }
}

system_account: SYS
accounts {
  # System Account
  SYS: {
    users: [
      # Admin: to manage everything
      { user: sys, password: 'admin' },
      # Cluster
      { user: nats_cluster, password: 'password' }
    ]

    exports: [
      # Export: MQTT online events
      { stream: '$SYS.ACCOUNT.MQTT.CONNECT' },
      { stream: '$SYS.ACCOUNT.MQTT.DISCONNECT' },
    ]
  },

  # Auth Callout
  AUTH: {
    users: [
      { user: auth_callout, password: auth_callout }
    ]
  }

  # MQTT Authenticated Users
  MQTT: {
    jetstream {}
    users: [
        # Server
        { user: mqtt_server, password: 'mqtt_server' },

        # This user only works when `verify_and_map=false`:
        # all MQTT users will have this name then
        # Use when: you want all MQTT/TLS users to have this name
        { user: mqtt_somebody,
          permissions: { publish = "device.*.from.>", subscribe = ["device.*.to", "device.*.to.>"] },
        },

        # Allow TLS users by SAN "DNS:mqtt.example.com" record
        # Use when: you want to extract a field (email, dns) from your certificates
        { user: 'mqtt.example.com',
          permissions: { publish = "device.*.from.>", subscribe = ["device.*.to", "device.*.to.>"] },
        },

        # Example: explicitly allow one specific user.
        # Note that you can't add all users to NATS this way: NATS is stateless.
        # However, consider templates and auth callouts.
        # { user: 'CN=1234,O=Company',
        #   permissions: { publish = "device.1234.from.>", subscribe = ["device.1234.to", "device.1234.to.>"] }
        # },
    ]

    exports: [
      # Export device subjects for whoever might want to listen in
      { stream: 'device.>' }
    ]
    imports: [
      # Import online/offline events into here
      # Connect: $SYS.ACCOUNT.MQTT.CONNECT
      # Subscribe: $MQTT.sess.RlXnTLSN
      # Disconnect: $SYS.ACCOUNT.MQTT.DISCONNECT
      { stream: {account: SYS, subject: '$SYS.ACCOUNT.MQTT.CONNECT'} },
      { stream: {account: SYS, subject: '$SYS.ACCOUNT.MQTT.DISCONNECT'} },
    ]
  }

  # Application
  APP: {
    jetstream {}
    users : [
      { user: app_backend, password: 'app_backend' },
    ]

    imports: [
      # Import device MQTT
      { prefix: mqtt, stream: {account: MQTT, subject: 'device.*.from.>'} }
    ]
  }
}

mqtt {
  port: 8883
  # This user only works when `verify_and_map=false`
  no_auth_user: mqtt_somebody  #-> MQTT
  ack_wait: "30m"

  tls {
    cert_file: "/server.crt"
    key_file: "/server.key"
    ca_file: "/ca.crt"
    # Verify the client certificate is signed using the same CA
    verify: true
    # Extract SAN from the client certificate and map it to a NATS user.
    # Will try: all email addresses first, then all DNS names, then the certificate subject line.
    # Example: user@hostname, mqtt.example.com, "CN=1234,O=Company".
    # Note that these usernames must exist: i.e. they'll have to be added to NATS config and mapped to permissions!
    # If you need granular permissions, implement auth_callout{}
    # verify_and_map: true
  }
}


# Uncomment to enable auth callout for all users.
# NOTE: This will take over NATS and completely disable all other users in the config!
# Literally, only "auth_callout" user will remain! Everything and everyone will get authenticated through the callout, including your system user!
# authorization {
#   auth_callout {
#     issuer: AAB7FG2N7JRFCNNLIM2ZB3ZPRUB7UUNO6YN2MRQPAZOTMDJFPPRQKWGX
#     auth_users: [ auth_callout ]
#     account: AUTH
#   }
# }
