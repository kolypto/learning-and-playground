# README: https://docs.nats.io/running-a-nats-service/configuration

# Syntax:
# values can be assigned with "a: b" or "a = b" and even "a b" syntax :)
# Variables: "ANYTHING = value", then reference $ANYTHING. Defaults come from env variables.
# Include: include ./auth.conf
# Reload config: $ nats-server --signal reload
# Reload config from NATS: $ nats --user sys --password sys request '$SYS.REQ.SERVER.<server-id>.RELOAD' ""
#

# Default: 4222
port: 4222
monitor_port: 8222

# A default NATS server will have no authentication or authorization enabled.
# This is useful for development and simple embedded use cases only.
# The default account is $G.
#
# Once at least one user is configured in the authorization or accounts sections,
# the default $G account and no-authentication user are disabled.
# You can restore no authentication access by setting the no_auth_user.
#
# No Auth User: The user to assume when no auth is provided.
# Their permissions and account will be used.
no_auth_user: app

# Enable JetStream
# It will automatically detect the available resources
jetstream: enabled

# Enable JetStream and specify limits. It's disabled by default.
# By default, the JetStream subsystem will store data in the /tmp directory
jetstream {
  # Where to store the data. Disabled because CLI flag is used already.
  # store_dir: /data/jetstream

  # Max size of the "memory" storage.
  # Default: 75% of the available memory
  max_mem: 1G

  # Max size of the "file" storage
  # Default: 1TB
  max_file: 100G

  # Fsync interval.
  # By default JetStream relies on stream replication for redundancy.
  # If you run JetStream without replication, or with replication of just 2, set a shorter interval.
  # Use "always" to fsync after each message â€” but this will slow down the throughput to a few hundred msg/s.
  sync_interval: 120s

  # Isolates the JetStream cluster to the local cluster. Recommended use with leaf nodes.
  domain: acme
}


# List of accounts and users within.
# Each account forms its own subject namespace
accounts: {
  # NATS has a *system account* for operations and monitoring, but by default it has no users.
  # The "system account" ($SYS by default) can subscribe to system events.
  # See: https://docs.nats.io/running-a-nats-service/configuration/sys_accounts#system-account
  $SYS: {
    users: [
      # System account to manage everything
      # NOTE: each user lives in an isolated address space
      {user:sys, password:admin},
    ]
  },

  # Separate account
  APP: {
    # Enable JetStream for this account
    jetstream { }

    # User accounts
    users: [
      # You can use encrypted passwords: use NATS cli:
      # $ nats server passwd
      { user:app_admin, password:admin },
      { user:app, password:verysecret },
      { user:default_mqtt_client, password:verysecret },
      # Use NKEYs (ed25519 keys):
      # $ nk -gen user -pubout
      { nkey: UDXU4RCSJNZOIQHZNWXHXORDPRTGNJAHAHFRGZNEEJCPQTT2M7NLCNF4 },
    ]

    # Specify mappings
    mappings {
      orders.acme.*: orders.$1
    }
  }
}

# MQTT Configuration
# README: https://docs.nats.io/running-a-nats-service/configuration/mqtt/mqtt_config
mqtt {
  port: 1883

  # The username to assume when no user is provided.
  # Their permissions and account will be used.
  no_auth_user: default_mqtt_client

  # Explicit usernames.
  # Use if there are no users configured for accounts.
  authorization {
    # Username/Password
    # username: "my_user_name"
    # password: "my_password"

    # Or token (provided as "password" in the CONNECT packet)
    # token: "my_token"
  }

  # JWT authentication: pass the JWT token as password. With any user name, except empty.
  # The JWT has to have the Bearer boolean set to true, which can be done with nsc:
  # $ nsc edit user --name U --account A --bearer


  # Redeliver QoS 1 messages as a DUPLICATE if the server has not received the PUBACK
  ack_wait: "30m"
}

# MQTT requires the server name to be set
server_name: "my_mqtt_server"

# Turn on websockets
websocket {
  port: 443
  no_tls: true  # for test environments
  compression: true

  # CORS
  same_origin: true
  allowed_origins [
    "http://www.example.com"
    "https://www.other-example.com"
  ]

  # Use this Cookie, if present, as the client's JWT.
  # If the client specifies a JWT in the CONNECT protocol, this option is ignored.
  jwt_cookie: "my_jwt_cookie_name"

  # Separate "no_auth_user" for websocket clients
  no_auth_user: "my_username_for_apps_not_providing_credentials"

  # Limit websocket clients to specific users.
  authorization {}
}


# This section is only useful if when no accounts are defined.
# Otherwise, define your `authorization` and `authentication` in `account.users`
authorization {
  # When an MQTT client creates a QoS 1 subscription, this translates to the creation of a JetStream durable subscription.
  # To receive messages for this durable, the NATS Server creates a subscription with a subject such as $MQTT.sub.
  # and sets it as the JetStream durable's delivery subject.
  # Therefore, if you have set some permissions for the MQTT user, you need to allow subscribe permissions on $MQTT.sub.>.
  mqtt_perms = {  # <- variable
    publish = ["baz"]
    subscribe = ["foo", "bar", "$MQTT.sub.>"]
  }

  users [
    # This user can only use MQTT
    # Options: STANDARD WEBSOCKET LEAFNODE MQTT
    {
      user:mqtt, password:pass,
      permissions: $mqtt_perms,
      allowed_connection_types: ["MQTT"]
    }
  ]
}

