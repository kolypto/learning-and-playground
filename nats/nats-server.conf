# README: https://docs.nats.io/running-a-nats-service/configuration

port: 4222
monitor_port: 8222

# A default NATS server will have no authentication or authorization enabled.
# This is useful for development and simple embedded use cases only.
# The default account is $G.
#
# Once at least one user is configured in the authorization or accounts sections,
# the default $G account and no-authentication user are disabled.
# You can restore no authentication access by setting the no_auth_user.
#
# No Auth User: The user to assume when no auth is provided.
# Their permissions and account will be used.
no_auth_user: app

accounts: {
  # Each account forms its own subject namespace
  # But the "mappings" section can appear on the top level ("server level") and apply to the default account.

  # The "system account" ($SYS by default) can subscribe to system events.
  # See: https://docs.nats.io/running-a-nats-service/configuration/sys_accounts#system-account
  $SYS: {
    users: [
        {user:admin, password:admin},
    ]
  },

  # Separate account
  APP: {
    users: [
      # You can use encrypted passwords: use NATS cli:
      # $ nats server passwd
      { user:app, password:verysecret },
      { user:default_mqtt_client, password:verysecret },
      # Use NKEYs (ed25519 keys):
      # $ nk -gen user -pubout
      { nkey: UDXU4RCSJNZOIQHZNWXHXORDPRTGNJAHAHFRGZNEEJCPQTT2M7NLCNF4 },
    ]
  }
}

# MQTT Configuration
# README: https://docs.nats.io/running-a-nats-service/configuration/mqtt/mqtt_config
mqtt {
  port: 1883

  # The username to assume when no user is provided.
  # Their permissions and account will be used.
  no_auth_user: default_mqtt_client

  # Explicit usernames
  authorization {
    # Username/Password
    # username: "my_user_name"
    # password: "my_password"

    # Or token (provided as "password" in the CONNECT packet)
    # token: "my_token"
  }

  # JWT authentication: pass the JWT token as password. With any user name, except empty.
  # The JWT has to have the Bearer boolean set to true, which can be done with nsc:
  # $ nsc edit user --name U --account A --bearer


  # Redeliver QoS 1 messages as a DUPLICATE if the server has not received the PUBACK
  ack_wait: "30m"
}

# MQTT requires the server name to be set
server_name: "my_mqtt_server"


authorization {
  # When an MQTT client creates a QoS 1 subscription, this translates to the creation of a JetStream durable subscription.
  # To receive messages for this durable, the NATS Server creates a subscription with a subject such as $MQTT.sub.
  # and sets it as the JetStream durable's delivery subject.
  # Therefore, if you have set some permissions for the MQTT user, you need to allow subscribe permissions on $MQTT.sub.>.
  mqtt_perms = {
    publish = ["baz"]
    subscribe = ["foo", "bar", "$MQTT.sub.>"]
  }

  users [
    # This user can only use MQTT
    # Options: STANDARD WEBSOCKET LEAFNODE MQTT
    {
      user:mqtt, password:pass,
      permissions: $mqtt_perms,
      allowed_connection_types: ["MQTT"]
    }
  ]
}
