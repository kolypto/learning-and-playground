# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.16.0
# source: query.sql
from typing import AsyncIterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from dbs import models


CREATE_USER = """-- name: create_user \\:one
INSERT INTO users (login, age) VALUES(:p1, :p2)
RETURNING id, login, age
"""


DELETE_USER = """-- name: delete_user \\:exec
DELETE FROM users
WHERE id = :p1
"""


GET_USER = """-- name: get_user \\:one
SELECT id, login, age FROM users
WHERE id = :p1 LIMIT 1
"""


LIST_USERS = """-- name: list_users \\:many
SELECT id, login, age FROM users
ORDER BY login
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_user(self, *, login: str, age: Optional[int]) -> Optional[models.User]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_USER), {"p1": login, "p2": age})).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            login=row[1],
            age=row[2],
        )

    async def delete_user(self, *, id: int) -> None:
        await self._conn.execute(sqlalchemy.text(DELETE_USER), {"p1": id})

    async def get_user(self, *, id: int) -> Optional[models.User]:
        row = (await self._conn.execute(sqlalchemy.text(GET_USER), {"p1": id})).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            login=row[1],
            age=row[2],
        )

    async def list_users(self) -> AsyncIterator[models.User]:
        result = await self._conn.stream(sqlalchemy.text(LIST_USERS))
        async for row in result:
            yield models.User(
                id=row[0],
                login=row[1],
                age=row[2],
            )
