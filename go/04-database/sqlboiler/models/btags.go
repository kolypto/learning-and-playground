// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Btag is an object representing the database table.
type Btag struct {
	ID   int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *btagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L btagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BtagColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var BtagTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "btags.id",
	Name: "btags.name",
}

// Generated where

var BtagWhere = struct {
	ID   whereHelperint64
	Name whereHelpernull_String
}{
	ID:   whereHelperint64{field: "\"btags\".\"id\""},
	Name: whereHelpernull_String{field: "\"btags\".\"name\""},
}

// BtagRels is where relationship names are stored.
var BtagRels = struct {
	ArticleBarticles string
}{
	ArticleBarticles: "ArticleBarticles",
}

// btagR is where relationships are stored.
type btagR struct {
	ArticleBarticles ArticleSlice `boil:"ArticleBarticles" json:"ArticleBarticles" toml:"ArticleBarticles" yaml:"ArticleBarticles"`
}

// NewStruct creates a new relationship struct
func (*btagR) NewStruct() *btagR {
	return &btagR{}
}

func (r *btagR) GetArticleBarticles() ArticleSlice {
	if r == nil {
		return nil
	}
	return r.ArticleBarticles
}

// btagL is where Load methods for each relationship are stored.
type btagL struct{}

var (
	btagAllColumns            = []string{"id", "name"}
	btagColumnsWithoutDefault = []string{}
	btagColumnsWithDefault    = []string{"id", "name"}
	btagPrimaryKeyColumns     = []string{"id"}
	btagGeneratedColumns      = []string{}
)

type (
	// BtagSlice is an alias for a slice of pointers to Btag.
	// This should almost always be used instead of []Btag.
	BtagSlice []*Btag
	// BtagHook is the signature for custom Btag hook methods
	BtagHook func(context.Context, boil.ContextExecutor, *Btag) error

	btagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	btagType                 = reflect.TypeOf(&Btag{})
	btagMapping              = queries.MakeStructMapping(btagType)
	btagPrimaryKeyMapping, _ = queries.BindMapping(btagType, btagMapping, btagPrimaryKeyColumns)
	btagInsertCacheMut       sync.RWMutex
	btagInsertCache          = make(map[string]insertCache)
	btagUpdateCacheMut       sync.RWMutex
	btagUpdateCache          = make(map[string]updateCache)
	btagUpsertCacheMut       sync.RWMutex
	btagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var btagAfterSelectHooks []BtagHook

var btagBeforeInsertHooks []BtagHook
var btagAfterInsertHooks []BtagHook

var btagBeforeUpdateHooks []BtagHook
var btagAfterUpdateHooks []BtagHook

var btagBeforeDeleteHooks []BtagHook
var btagAfterDeleteHooks []BtagHook

var btagBeforeUpsertHooks []BtagHook
var btagAfterUpsertHooks []BtagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Btag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range btagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Btag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range btagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Btag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range btagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Btag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range btagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Btag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range btagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Btag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range btagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Btag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range btagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Btag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range btagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Btag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range btagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBtagHook registers your hook function for all future operations.
func AddBtagHook(hookPoint boil.HookPoint, btagHook BtagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		btagAfterSelectHooks = append(btagAfterSelectHooks, btagHook)
	case boil.BeforeInsertHook:
		btagBeforeInsertHooks = append(btagBeforeInsertHooks, btagHook)
	case boil.AfterInsertHook:
		btagAfterInsertHooks = append(btagAfterInsertHooks, btagHook)
	case boil.BeforeUpdateHook:
		btagBeforeUpdateHooks = append(btagBeforeUpdateHooks, btagHook)
	case boil.AfterUpdateHook:
		btagAfterUpdateHooks = append(btagAfterUpdateHooks, btagHook)
	case boil.BeforeDeleteHook:
		btagBeforeDeleteHooks = append(btagBeforeDeleteHooks, btagHook)
	case boil.AfterDeleteHook:
		btagAfterDeleteHooks = append(btagAfterDeleteHooks, btagHook)
	case boil.BeforeUpsertHook:
		btagBeforeUpsertHooks = append(btagBeforeUpsertHooks, btagHook)
	case boil.AfterUpsertHook:
		btagAfterUpsertHooks = append(btagAfterUpsertHooks, btagHook)
	}
}

// OneG returns a single btag record from the query using the global executor.
func (q btagQuery) OneG(ctx context.Context) (*Btag, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single btag record from the query using the global executor, and panics on error.
func (q btagQuery) OneGP(ctx context.Context) *Btag {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single btag record from the query, and panics on error.
func (q btagQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *Btag {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single btag record from the query.
func (q btagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Btag, error) {
	o := &Btag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for btags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Btag records from the query using the global executor.
func (q btagQuery) AllG(ctx context.Context) (BtagSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all Btag records from the query using the global executor, and panics on error.
func (q btagQuery) AllGP(ctx context.Context) BtagSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all Btag records from the query, and panics on error.
func (q btagQuery) AllP(ctx context.Context, exec boil.ContextExecutor) BtagSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Btag records from the query.
func (q btagQuery) All(ctx context.Context, exec boil.ContextExecutor) (BtagSlice, error) {
	var o []*Btag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Btag slice")
	}

	if len(btagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Btag records in the query using the global executor
func (q btagQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all Btag records in the query using the global executor, and panics on error.
func (q btagQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all Btag records in the query, and panics on error.
func (q btagQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Btag records in the query.
func (q btagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count btags rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q btagQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q btagQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q btagQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q btagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if btags exists")
	}

	return count > 0, nil
}

// ArticleBarticles retrieves all the barticle's Articles with an executor via id column.
func (o *Btag) ArticleBarticles(mods ...qm.QueryMod) articleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"barticle_tags\" on \"barticles\".\"id\" = \"barticle_tags\".\"article_id\""),
		qm.Where("\"barticle_tags\".\"tag_id\"=?", o.ID),
	)

	return Articles(queryMods...)
}

// LoadArticleBarticles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (btagL) LoadArticleBarticles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBtag interface{}, mods queries.Applicator) error {
	var slice []*Btag
	var object *Btag

	if singular {
		var ok bool
		object, ok = maybeBtag.(*Btag)
		if !ok {
			object = new(Btag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBtag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBtag))
			}
		}
	} else {
		s, ok := maybeBtag.(*[]*Btag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBtag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBtag))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &btagR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &btagR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"barticles\".\"id\", \"barticles\".\"author_id\", \"barticles\".\"title\", \"barticles\".\"body\", \"a\".\"tag_id\""),
		qm.From("\"barticles\""),
		qm.InnerJoin("\"barticle_tags\" as \"a\" on \"barticles\".\"id\" = \"a\".\"article_id\""),
		qm.WhereIn("\"a\".\"tag_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load barticles")
	}

	var resultSlice []*Article

	var localJoinCols []int64
	for results.Next() {
		one := new(Article)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.AuthorID, &one.Title, &one.Body, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for barticles")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice barticles")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on barticles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for barticles")
	}

	if len(articleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ArticleBarticles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &articleR{}
			}
			foreign.R.TagBtags = append(foreign.R.TagBtags, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.ArticleBarticles = append(local.R.ArticleBarticles, foreign)
				if foreign.R == nil {
					foreign.R = &articleR{}
				}
				foreign.R.TagBtags = append(foreign.R.TagBtags, local)
				break
			}
		}
	}

	return nil
}

// AddArticleBarticlesG adds the given related objects to the existing relationships
// of the btag, optionally inserting them as new records.
// Appends related to o.R.ArticleBarticles.
// Sets related.R.TagBtags appropriately.
// Uses the global database handle.
func (o *Btag) AddArticleBarticlesG(ctx context.Context, insert bool, related ...*Article) error {
	return o.AddArticleBarticles(ctx, boil.GetContextDB(), insert, related...)
}

// AddArticleBarticlesP adds the given related objects to the existing relationships
// of the btag, optionally inserting them as new records.
// Appends related to o.R.ArticleBarticles.
// Sets related.R.TagBtags appropriately.
// Panics on error.
func (o *Btag) AddArticleBarticlesP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Article) {
	if err := o.AddArticleBarticles(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddArticleBarticlesGP adds the given related objects to the existing relationships
// of the btag, optionally inserting them as new records.
// Appends related to o.R.ArticleBarticles.
// Sets related.R.TagBtags appropriately.
// Uses the global database handle and panics on error.
func (o *Btag) AddArticleBarticlesGP(ctx context.Context, insert bool, related ...*Article) {
	if err := o.AddArticleBarticles(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddArticleBarticles adds the given related objects to the existing relationships
// of the btag, optionally inserting them as new records.
// Appends related to o.R.ArticleBarticles.
// Sets related.R.TagBtags appropriately.
func (o *Btag) AddArticleBarticles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Article) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"barticle_tags\" (\"tag_id\", \"article_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &btagR{
			ArticleBarticles: related,
		}
	} else {
		o.R.ArticleBarticles = append(o.R.ArticleBarticles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &articleR{
				TagBtags: BtagSlice{o},
			}
		} else {
			rel.R.TagBtags = append(rel.R.TagBtags, o)
		}
	}
	return nil
}

// SetArticleBarticlesG removes all previously related items of the
// btag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TagBtags's ArticleBarticles accordingly.
// Replaces o.R.ArticleBarticles with related.
// Sets related.R.TagBtags's ArticleBarticles accordingly.
// Uses the global database handle.
func (o *Btag) SetArticleBarticlesG(ctx context.Context, insert bool, related ...*Article) error {
	return o.SetArticleBarticles(ctx, boil.GetContextDB(), insert, related...)
}

// SetArticleBarticlesP removes all previously related items of the
// btag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TagBtags's ArticleBarticles accordingly.
// Replaces o.R.ArticleBarticles with related.
// Sets related.R.TagBtags's ArticleBarticles accordingly.
// Panics on error.
func (o *Btag) SetArticleBarticlesP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Article) {
	if err := o.SetArticleBarticles(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetArticleBarticlesGP removes all previously related items of the
// btag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TagBtags's ArticleBarticles accordingly.
// Replaces o.R.ArticleBarticles with related.
// Sets related.R.TagBtags's ArticleBarticles accordingly.
// Uses the global database handle and panics on error.
func (o *Btag) SetArticleBarticlesGP(ctx context.Context, insert bool, related ...*Article) {
	if err := o.SetArticleBarticles(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetArticleBarticles removes all previously related items of the
// btag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TagBtags's ArticleBarticles accordingly.
// Replaces o.R.ArticleBarticles with related.
// Sets related.R.TagBtags's ArticleBarticles accordingly.
func (o *Btag) SetArticleBarticles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Article) error {
	query := "delete from \"barticle_tags\" where \"tag_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeArticleBarticlesFromTagBtagsSlice(o, related)
	if o.R != nil {
		o.R.ArticleBarticles = nil
	}

	return o.AddArticleBarticles(ctx, exec, insert, related...)
}

// RemoveArticleBarticlesG relationships from objects passed in.
// Removes related items from R.ArticleBarticles (uses pointer comparison, removal does not keep order)
// Sets related.R.TagBtags.
// Uses the global database handle.
func (o *Btag) RemoveArticleBarticlesG(ctx context.Context, related ...*Article) error {
	return o.RemoveArticleBarticles(ctx, boil.GetContextDB(), related...)
}

// RemoveArticleBarticlesP relationships from objects passed in.
// Removes related items from R.ArticleBarticles (uses pointer comparison, removal does not keep order)
// Sets related.R.TagBtags.
// Panics on error.
func (o *Btag) RemoveArticleBarticlesP(ctx context.Context, exec boil.ContextExecutor, related ...*Article) {
	if err := o.RemoveArticleBarticles(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveArticleBarticlesGP relationships from objects passed in.
// Removes related items from R.ArticleBarticles (uses pointer comparison, removal does not keep order)
// Sets related.R.TagBtags.
// Uses the global database handle and panics on error.
func (o *Btag) RemoveArticleBarticlesGP(ctx context.Context, related ...*Article) {
	if err := o.RemoveArticleBarticles(ctx, boil.GetContextDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveArticleBarticles relationships from objects passed in.
// Removes related items from R.ArticleBarticles (uses pointer comparison, removal does not keep order)
// Sets related.R.TagBtags.
func (o *Btag) RemoveArticleBarticles(ctx context.Context, exec boil.ContextExecutor, related ...*Article) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"barticle_tags\" where \"tag_id\" = $1 and \"article_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeArticleBarticlesFromTagBtagsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ArticleBarticles {
			if rel != ri {
				continue
			}

			ln := len(o.R.ArticleBarticles)
			if ln > 1 && i < ln-1 {
				o.R.ArticleBarticles[i] = o.R.ArticleBarticles[ln-1]
			}
			o.R.ArticleBarticles = o.R.ArticleBarticles[:ln-1]
			break
		}
	}

	return nil
}

func removeArticleBarticlesFromTagBtagsSlice(o *Btag, related []*Article) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.TagBtags {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.TagBtags)
			if ln > 1 && i < ln-1 {
				rel.R.TagBtags[i] = rel.R.TagBtags[ln-1]
			}
			rel.R.TagBtags = rel.R.TagBtags[:ln-1]
			break
		}
	}
}

// Btags retrieves all the records using an executor.
func Btags(mods ...qm.QueryMod) btagQuery {
	mods = append(mods, qm.From("\"btags\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"btags\".*"})
	}

	return btagQuery{q}
}

// FindBtagG retrieves a single record by ID.
func FindBtagG(ctx context.Context, iD int64, selectCols ...string) (*Btag, error) {
	return FindBtag(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBtagP retrieves a single record by ID with an executor, and panics on error.
func FindBtagP(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) *Btag {
	retobj, err := FindBtag(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBtagGP retrieves a single record by ID, and panics on error.
func FindBtagGP(ctx context.Context, iD int64, selectCols ...string) *Btag {
	retobj, err := FindBtag(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBtag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBtag(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Btag, error) {
	btagObj := &Btag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"btags\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, btagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from btags")
	}

	if err = btagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return btagObj, err
	}

	return btagObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Btag) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Btag) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Btag) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Btag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no btags provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(btagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	btagInsertCacheMut.RLock()
	cache, cached := btagInsertCache[key]
	btagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			btagAllColumns,
			btagColumnsWithDefault,
			btagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(btagType, btagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(btagType, btagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"btags\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"btags\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into btags")
	}

	if !cached {
		btagInsertCacheMut.Lock()
		btagInsertCache[key] = cache
		btagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Btag record using the global executor.
// See Update for more documentation.
func (o *Btag) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the Btag, and panics on error.
// See Update for more documentation.
func (o *Btag) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single Btag record using the global executor. Panics on error.
// See Update for more documentation.
func (o *Btag) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the Btag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Btag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	btagUpdateCacheMut.RLock()
	cache, cached := btagUpdateCache[key]
	btagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			btagAllColumns,
			btagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update btags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"btags\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, btagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(btagType, btagMapping, append(wl, btagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update btags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for btags")
	}

	if !cached {
		btagUpdateCacheMut.Lock()
		btagUpdateCache[key] = cache
		btagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q btagQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q btagQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q btagQuery) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q btagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for btags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for btags")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BtagSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BtagSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BtagSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BtagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), btagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"btags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, btagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in btag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all btag")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Btag) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Btag) UpsertGP(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Btag) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Btag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no btags provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(btagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	btagUpsertCacheMut.RLock()
	cache, cached := btagUpsertCache[key]
	btagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			btagAllColumns,
			btagColumnsWithDefault,
			btagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			btagAllColumns,
			btagPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert btags, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(btagPrimaryKeyColumns))
			copy(conflict, btagPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"btags\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(btagType, btagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(btagType, btagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert btags")
	}

	if !cached {
		btagUpsertCacheMut.Lock()
		btagUpsertCache[key] = cache
		btagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Btag record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Btag) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single Btag record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Btag) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single Btag record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Btag) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single Btag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Btag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Btag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), btagPrimaryKeyMapping)
	sql := "DELETE FROM \"btags\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from btags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for btags")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q btagQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q btagQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q btagQuery) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := q.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q btagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no btagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from btags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for btags")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BtagSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BtagSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BtagSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BtagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(btagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), btagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"btags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, btagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from btag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for btags")
	}

	if len(btagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Btag) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Btag provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Btag) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Btag) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Btag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBtag(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BtagSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BtagSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BtagSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BtagSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BtagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BtagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), btagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"btags\".* FROM \"btags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, btagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BtagSlice")
	}

	*o = slice

	return nil
}

// BtagExistsG checks if the Btag row exists.
func BtagExistsG(ctx context.Context, iD int64) (bool, error) {
	return BtagExists(ctx, boil.GetContextDB(), iD)
}

// BtagExistsP checks if the Btag row exists. Panics on error.
func BtagExistsP(ctx context.Context, exec boil.ContextExecutor, iD int64) bool {
	e, err := BtagExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BtagExistsGP checks if the Btag row exists. Panics on error.
func BtagExistsGP(ctx context.Context, iD int64) bool {
	e, err := BtagExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BtagExists checks if the Btag row exists.
func BtagExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"btags\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if btags exists")
	}

	return exists, nil
}
